Programmer notes for contraption.

The model is a strict input/output model.  The user defines the source
of inputs, and which output products they want.  Then we glue it all
together and run it.

Sources have default names and the user may define a default
directory.  These can all be overridden.

But developing everything monolithicly feels like a mess.  So I'm
going to develop multiple executables, then merge them after they're
done.

Did token and syntax, for the datatypes.  Next step seems to require
involving the CSV, doesn't it?  The Env wants access to overrides; the
overrides *don't* live in Config but are loaded from the CSV.

----
 * What do I need to do for prettyprinting config, csv?
 * I'm not distinguishing between no exports and no export-list.
 * I probably want to insert "full" into "module name" in Env.
 * I didn't implement quasiquoters for contraption-spike.  Should.
 * An option to merge prettyprinting into CST defn avoiding orphans?
 * I'd like to run the CompileAll sources through formatting.
 * Be able to override the name generators in Names?
 * How to insert user-defined code?  My HaskellUtils don't allow hacking
   arbitrary text in (and shouldn't).
 * Allow alternate parsers/testers?  Or am I too opinionated?
 * Should HaskellUtils go into CodeGen?
 * Do I want to parameterize generateToken and parseToken?
 * Parameterize the string type used in parsing?  I think not: roundtripping
   uses Strings.  But ponder more.
 * Parameterize stackage resolver.
 * Parameterize prettyprinter used on generated code.

 * finish token-generators: needs csv
 * finish token-parsers: needs csv
 * finish syntax-generators: needs analysis.  Pull exactly what you
   need, though.
 * finish syntax-parsers: needs csv

token.csv
    name,fixedSymbol,
    generator,parser,prettyprinter

syntax.csv
    prodNm,ctorNm,
    generator,generatorFreq,generatorRecursive,
    parser,parserIndex,
    prettyprinter


